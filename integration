#include <iostream>
#include <cmath>
#include <vector>
#include <numeric>
using namespace std;

class numericalIntegration
{
private:
    int numIntervals;
    double x;
    double low;
    double up;
    double ans;
    double (*pfun)(const double & x);
    
public:
    numericalIntegration(double (*F)(const double & x), const double & low,
                         const double & up){
        this->pfun = F;
        this->low = low;
        this->up = up;
        this->numIntervals = 1000;
    }
    
    double trapezoidal();
    double simpson();
};

double numericalIntegration::simpson(){
    double dx = (up-low)/(double)numIntervals;
    double sum1,sum2;
    double x = low;
    
    sum1=sum2=0;
    for(int i=1; i<numIntervals; ++i){
        x += dx;
        if(i%2) sum1 += (*pfun)(x);
        else sum2 += (*pfun)(x);
    }
    ans = ((*pfun)(low)+(*pfun)(up)+4*sum1+2*sum2)*dx/3.0;
    return ans;
}
double numericalIntegration::trapezoidal(){
    double dx = (up-low)/(double)numIntervals;
    double sum = 0.0;
    double x = low;
        for(int i=1; i<numIntervals; ++i){
        x += dx;
        sum += (*pfun)(x);
    }
    ans = ((*pfun)(low)+(*pfun)(up)+2*sum)*dx/2.0;
        return ans;
}

double fun1(const double & x){
    return -x*x+x+5;
}

double fun2(const double & x)
{
    return x*exp(-x*x/2.0);
}

double fun3(const double & x){
    return exp(-x)*sin(x);
}

int main(){
    numericalIntegration numFun(fun1,0,2);
    cout << numFun.trapezoidal() << endl;
    cout << numFun.simpson() << endl;
    return 0;
}
